/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.11 disease-animation.gltf --transform
*/

import React, { useRef, useEffect, useCallback } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";

export default function DiseaseAnimation({ isPlaying }) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF(
    "/glb/disease-animation-transformed.glb"
  );
  const { actions, mixer } = useAnimations(animations, group);

  // 애니메이션 재생/멈춤 함수를 useCallback을 이용하여 최적화
  const toggleAnimation = useCallback(() => {
    if (isPlaying) {
      // 애니메이션 멈추기
      actions["KeyAction"].paused = true;
      // 멈춘 지점의 시간으로 설정하여 애니메이션이 멈춘 지점에서 유지되도록 함
    } else {
      // 애니메이션 재생
      actions["KeyAction"].paused = false;
      actions["KeyAction"].play();
    }
  }, [isPlaying, actions, mixer]);

  useEffect(() => {
    // isPlaying 상태가 변경될 때만 toggleAnimation 함수 호출
    toggleAnimation();
  }, [isPlaying, toggleAnimation]);
  return (
    <group ref={group} dispose={null}>
      <group name="Scene">
        <group name="result9" rotation={[0, -1.33, 0]}>
          <mesh
            name="result-9"
            geometry={nodes["result-9"].geometry}
            material={materials["VG07brn1.001"]}
            morphTargetDictionary={nodes["result-9"].morphTargetDictionary}
            morphTargetInfluences={nodes["result-9"].morphTargetInfluences}
          />
          <mesh
            name="result-9_1"
            geometry={nodes["result-9_1"].geometry}
            material={materials["fruit-ripe.001"]}
            morphTargetDictionary={nodes["result-9_1"].morphTargetDictionary}
            morphTargetInfluences={nodes["result-9_1"].morphTargetInfluences}
          />
          <mesh
            name="result-9_2"
            geometry={nodes["result-9_2"].geometry}
            material={materials["leaf_disease.001"]}
            morphTargetDictionary={nodes["result-9_2"].morphTargetDictionary}
            morphTargetInfluences={nodes["result-9_2"].morphTargetInfluences}
          />
          <mesh
            name="result-9_3"
            geometry={nodes["result-9_3"].geometry}
            material={materials["stem.001"]}
            morphTargetDictionary={nodes["result-9_3"].morphTargetDictionary}
            morphTargetInfluences={nodes["result-9_3"].morphTargetInfluences}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/glb/disease-animation-transformed.glb");
